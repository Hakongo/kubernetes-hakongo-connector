apiVersion: apps/v1
kind: Deployment
metadata:
  name: mock-hakongo-api
  labels:
    app: mock-hakongo-api
spec:
  replicas: 1
  selector:
    matchLabels:
      app: mock-hakongo-api
  template:
    metadata:
      labels:
        app: mock-hakongo-api
    spec:
      containers:
      - name: mock-api
        image: openresty/openresty:alpine
        ports:
        - containerPort: 80
          name: http
        - containerPort: 8080
          name: metrics-ui
        resources:
          limits:
            cpu: "200m"
            memory: "256Mi"
          requests:
            cpu: "100m"
            memory: "128Mi"
        volumeMounts:
        - name: nginx-config
          mountPath: /etc/nginx/conf.d
        - name: nginx-logs
          mountPath: /var/log/nginx
        - name: metrics-storage
          mountPath: /var/lib/metrics
        - name: metrics-ui
          mountPath: /usr/share/nginx/html
      - name: metrics-processor
        image: alpine:latest
        command: ["/bin/sh", "-c"]
        args:
        - |
          apk add --no-cache jq curl
          mkdir -p /var/lib/metrics/processed
          while true; do
            # Process regular metrics
            if [ -f /var/lib/metrics/latest.json ]; then
              cat /var/lib/metrics/latest.json | jq '.' > /var/lib/metrics/processed/formatted.json
              cat /var/lib/metrics/latest.json | jq 'length' > /var/lib/metrics/processed/count.txt
              cat /var/lib/metrics/latest.json | jq 'map(.resourceType) | group_by(.) | map({key: .[0], count: length})' > /var/lib/metrics/processed/types.json
              cat /var/lib/metrics/latest.json | jq 'map(select(.resourceType == "Pod")) | length' > /var/lib/metrics/processed/pods.txt
              cat /var/lib/metrics/latest.json | jq 'map(select(.resourceType == "Node")) | length' > /var/lib/metrics/processed/nodes.txt
              cat /var/lib/metrics/latest.json | jq 'map(select(.resourceType == "Service")) | length' > /var/lib/metrics/processed/services.txt
              cat /var/lib/metrics/latest.json | jq 'map(select(.resourceType == "Ingress")) | length' > /var/lib/metrics/processed/ingresses.txt
              cat /var/lib/metrics/latest.json | jq 'map(select(.resourceType == "Namespace")) | length' > /var/lib/metrics/processed/namespaces.txt
              cat /var/lib/metrics/latest.json | jq 'map(select(.resourceType == "PersistentVolume")) | length' > /var/lib/metrics/processed/pvs.txt
              cat /var/lib/metrics/latest.json | jq 'map(select(.resourceType | startswith("Workload"))) | length' > /var/lib/metrics/processed/workloads.txt
              echo "$(date): Processed new metrics batch" >> /var/lib/metrics/processed/log.txt
            fi
            
            # Process event metrics
            if [ -f /var/lib/metrics/latest_events.json ]; then
              cat /var/lib/metrics/latest_events.json | jq '.' > /var/lib/metrics/processed/events_formatted.json
              cat /var/lib/metrics/latest_events.json | jq '.events | length' > /var/lib/metrics/processed/events_count.txt
              cat /var/lib/metrics/latest_events.json | jq '.events | map(.type) | group_by(.) | map({key: .[0], count: length})' > /var/lib/metrics/processed/event_types.json
              cat /var/lib/metrics/latest_events.json | jq '.events | map(.severity) | group_by(.) | map({key: .[0], count: length})' > /var/lib/metrics/processed/event_severities.json
              cat /var/lib/metrics/latest_events.json | jq '.events | map(.namespace) | group_by(.) | map({key: .[0], count: length})' > /var/lib/metrics/processed/event_namespaces.json
              cat /var/lib/metrics/latest_events.json | jq '.events | map(select(.type == "Normal")) | length' > /var/lib/metrics/processed/normal_events.txt
              cat /var/lib/metrics/latest_events.json | jq '.events | map(select(.type == "Warning")) | length' > /var/lib/metrics/processed/warning_events.txt
              echo "$(date): Processed new events batch" >> /var/lib/metrics/processed/log.txt
            fi
            
            sleep 5
          done
        resources:
          limits:
            cpu: "100m"
            memory: "128Mi"
          requests:
            cpu: "50m"
            memory: "64Mi"
        volumeMounts:
        - name: metrics-storage
          mountPath: /var/lib/metrics
      volumes:
      - name: nginx-config
        configMap:
          name: mock-api-config
      - name: nginx-logs
        emptyDir: {}
      - name: metrics-storage
        emptyDir: {}
      - name: metrics-ui
        configMap:
          name: metrics-ui-config
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: mock-api-config
data:
  default.conf: |
    log_format detailed_logs '$remote_addr - $remote_user [$time_local] "$request" '
                          '$status $body_bytes_sent "$http_referer" "$http_user_agent" "$http_x_forwarded_for"';
    log_format json_logs escape=json '$remote_addr - $remote_user [$time_local] "$request" '
                          '$status $body_bytes_sent "$http_referer" "$http_user_agent" "$http_x_forwarded_for" $request_body';

    server {
      listen 80;
      access_log /var/log/nginx/access.log detailed_logs;
      error_log /var/log/nginx/error.log debug;
      
      client_body_buffer_size 10M;
      client_max_body_size 10M;
      
      location /v1/metrics {
        # Log the request details with body
        access_log /var/log/nginx/metrics.log json_logs;
        
        # Store the latest metrics for processing
        client_body_in_file_only on;
        client_body_temp_path /var/lib/metrics/;
        set $metricsfile "/var/lib/metrics/latest.json";
        rewrite_by_lua_block {
          ngx.req.read_body()
          local body = ngx.req.get_body_data()
          if body then
            local file = io.open(ngx.var.metricsfile, "w")
            if file then
              file:write(body)
              file:close()
            end
          end
        }
        
        # Return success response
        add_header Content-Type application/json;
        return 200 '{"status":"ok","message":"Metrics received successfully","timestamp":"$time_local","metrics_count":"$content_length"}';
      }
      
      location /v1/metrics/events {
        # Log the request details with body
        access_log /var/log/nginx/events.log json_logs;
        
        # Store the latest event metrics for processing
        client_body_in_file_only on;
        client_body_temp_path /var/lib/metrics/;
        set $eventsfile "/var/lib/metrics/latest_events.json";
        rewrite_by_lua_block {
          ngx.req.read_body()
          local body = ngx.req.get_body_data()
          if body then
            local file = io.open(ngx.var.eventsfile, "w")
            if file then
              file:write(body)
              file:close()
            end
          end
        }
        
        # Return success response
        add_header Content-Type application/json;
        return 200 '{"status":"ok","message":"Event metrics received successfully","timestamp":"$time_local","events_count":"$content_length"}';
      }
      
      location /v1/clusters {
        add_header Content-Type application/json;
        return 200 '{"status":"ok","message":"Cluster config retrieved","data":{"collectionInterval":60,"includeNamespaces":[],"excludeNamespaces":["kube-system"],"resourceTypes":["Pod","Node","Service","Ingress","Namespace","PersistentVolume","Workload"],"costingConfiguration":{"currency":"USD","cpuCostPerCore":30,"memoryCostPerGB":5,"storageCostPerGB":0.1,"networkCostPerGB":0.01,"customCostFactors":{}},"alertingRules":[],"customMetrics":[]}}'; 
      }
      
      location / {
        add_header Content-Type application/json;
        return 200 '{"status":"ok","message":"Mock HakonGo API"}';
      }
    }
    
    server {
      listen 8080;
      root /usr/share/nginx/html;
      index index.html;
      
      location /api/metrics {
        alias /var/lib/metrics/processed/;
        autoindex on;
        default_type application/json;
      }
      
      location / {
        try_files $uri $uri/ /index.html;
      }
    }
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: metrics-ui-config
data:
  index.html: |
    <!DOCTYPE html>
    <html lang="en">
    <head>
      <meta charset="UTF-8">
      <meta name="viewport" content="width=device-width, initial-scale=1.0">
      <title>HakonGo Metrics Dashboard</title>
      <style>
        body {
          font-family: Arial, sans-serif;
          margin: 0;
          padding: 20px;
          background-color: #f5f5f5;
        }
        .container {
          max-width: 1200px;
          margin: 0 auto;
        }
        .header {
          background-color: #2c3e50;
          color: white;
          padding: 20px;
          border-radius: 5px;
          margin-bottom: 20px;
        }
        .card {
          background-color: white;
          border-radius: 5px;
          box-shadow: 0 2px 5px rgba(0,0,0,0.1);
          padding: 20px;
          margin-bottom: 20px;
        }
        .metrics-grid {
          display: grid;
          grid-template-columns: repeat(auto-fill, minmax(200px, 1fr));
          gap: 15px;
        }
        .metric-box {
          background-color: #ecf0f1;
          border-radius: 5px;
          padding: 15px;
          text-align: center;
        }
        .metric-value {
          font-size: 24px;
          font-weight: bold;
          margin: 10px 0;
          color: #3498db;
        }
        .metric-label {
          font-size: 14px;
          color: #7f8c8d;
        }
        pre {
          background-color: #f8f9fa;
          border-radius: 5px;
          padding: 15px;
          overflow: auto;
          max-height: 500px;
        }
        .refresh-btn {
          background-color: #3498db;
          color: white;
          border: none;
          padding: 10px 15px;
          border-radius: 5px;
          cursor: pointer;
        }
        .refresh-btn:hover {
          background-color: #2980b9;
        }
        .timestamp {
          font-size: 12px;
          color: #95a5a6;
          text-align: right;
        }
      </style>
    </head>
    <body>
      <div class="container">
        <div class="header">
          <h1>HakonGo Metrics Dashboard</h1>
          <p>Mock API Server for Kubernetes Connector Testing</p>
        </div>
        
        <div class="card">
          <div class="card-header">
            <h2>Resource Metrics Summary</h2>
            <button class="refresh-btn" onclick="refreshData()">Refresh Data</button>
            <div class="timestamp" id="timestamp"></div>
          </div>
          <div class="metrics-grid" id="metrics-summary">
            <!-- Metrics will be populated here -->
          </div>
        </div>
        
        <div class="card">
          <div class="card-header">
            <h2>Event Metrics Summary</h2>
          </div>
          <div class="metrics-grid" id="events-summary">
            <!-- Event metrics will be populated here -->
          </div>
        </div>
        
        <div class="card">
          <h2>Resource Type Distribution</h2>
          <div id="type-distribution">
            <!-- Type distribution will be populated here -->
          </div>
        </div>
        
        <div class="card">
          <h2>Latest Resource Metrics (Raw JSON)</h2>
          <pre id="raw-metrics">Loading...</pre>
        </div>
        
        <div class="card">
          <h2>Latest Event Metrics (Raw JSON)</h2>
          <pre id="raw-events">Loading...</pre>
        </div>
      </div>
      
      <script>
        // Function to fetch and update metrics data
        async function refreshData() {
          try {
            // Update timestamp
            document.getElementById('timestamp').innerText = `Last updated: ${new Date().toLocaleString()}`;
            
            // Fetch resource metrics count
            const countResponse = await fetch('/api/metrics/count.txt');
            const count = await countResponse.text();
            
            // Fetch resource type counts
            const podsResponse = await fetch('/api/metrics/pods.txt');
            const nodesResponse = await fetch('/api/metrics/nodes.txt');
            const servicesResponse = await fetch('/api/metrics/services.txt');
            const ingressesResponse = await fetch('/api/metrics/ingresses.txt');
            const namespacesResponse = await fetch('/api/metrics/namespaces.txt');
            const pvsResponse = await fetch('/api/metrics/pvs.txt');
            const workloadsResponse = await fetch('/api/metrics/workloads.txt');
            
            const pods = await podsResponse.text();
            const nodes = await nodesResponse.text();
            const services = await servicesResponse.text();
            const ingresses = await ingressesResponse.text();
            const namespaces = await namespacesResponse.text();
            const pvs = await pvsResponse.text();
            const workloads = await workloadsResponse.text();
            
            // Update resource metrics summary
            const metricsHtml = `
              <div class="metric-box">
                <div class="metric-label">Total Metrics</div>
                <div class="metric-value">${count || 0}</div>
              </div>
              <div class="metric-box">
                <div class="metric-label">Pods</div>
                <div class="metric-value">${pods || 0}</div>
              </div>
              <div class="metric-box">
                <div class="metric-label">Nodes</div>
                <div class="metric-value">${nodes || 0}</div>
              </div>
              <div class="metric-box">
                <div class="metric-label">Services</div>
                <div class="metric-value">${services || 0}</div>
              </div>
              <div class="metric-box">
                <div class="metric-label">Ingresses</div>
                <div class="metric-value">${ingresses || 0}</div>
              </div>
              <div class="metric-box">
                <div class="metric-label">Namespaces</div>
                <div class="metric-value">${namespaces || 0}</div>
              </div>
              <div class="metric-box">
                <div class="metric-label">PersistentVolumes</div>
                <div class="metric-value">${pvs || 0}</div>
              </div>
              <div class="metric-box">
                <div class="metric-label">Workloads</div>
                <div class="metric-value">${workloads || 0}</div>
              </div>
            `;
            document.getElementById('metrics-summary').innerHTML = metricsHtml;
            
            // Fetch event metrics data
            try {
              const eventsCountResponse = await fetch('/api/metrics/events_count.txt');
              const normalEventsResponse = await fetch('/api/metrics/normal_events.txt');
              const warningEventsResponse = await fetch('/api/metrics/warning_events.txt');
              
              const eventsCount = await eventsCountResponse.text();
              const normalEvents = await normalEventsResponse.text();
              const warningEvents = await warningEventsResponse.text();
              
              // Update event metrics summary
              const eventsHtml = `
                <div class="metric-box">
                  <div class="metric-label">Total Events</div>
                  <div class="metric-value">${eventsCount || 0}</div>
                </div>
                <div class="metric-box">
                  <div class="metric-label">Normal Events</div>
                  <div class="metric-value">${normalEvents || 0}</div>
                </div>
                <div class="metric-box">
                  <div class="metric-label">Warning Events</div>
                  <div class="metric-value">${warningEvents || 0}</div>
                </div>
              `;
              document.getElementById('events-summary').innerHTML = eventsHtml;
              
              // Fetch and update event type distribution
              try {
                const eventTypesResponse = await fetch('/api/metrics/event_types.json');
                const eventTypes = await eventTypesResponse.json();
                
                let eventTypesHtml = '<h3>Event Types</h3><ul>';
                eventTypes.forEach(type => {
                  eventTypesHtml += `<li><strong>${type.key}:</strong> ${type.count} events</li>`;
                });
                eventTypesHtml += '</ul>';
                
                // Add event types to the type distribution section
                document.getElementById('type-distribution').innerHTML += eventTypesHtml;
              } catch (error) {
                console.log('No event types data available yet');
              }
            } catch (error) {
              console.log('No event metrics data available yet');
              document.getElementById('events-summary').innerHTML = `
                <div class="metric-box">
                  <div class="metric-label">Total Events</div>
                  <div class="metric-value">0</div>
                </div>
                <div class="metric-box">
                  <div class="metric-label">Normal Events</div>
                  <div class="metric-value">0</div>
                </div>
                <div class="metric-box">
                  <div class="metric-label">Warning Events</div>
                  <div class="metric-value">0</div>
                </div>
              `;
            }
            
            // Fetch and update resource type distribution
            const typesResponse = await fetch('/api/metrics/types.json');
            const types = await typesResponse.json();
            
            let typesHtml = '<h3>Resource Types</h3><ul>';
            types.forEach(type => {
              typesHtml += `<li><strong>${type.key}:</strong> ${type.count} metrics</li>`;
            });
            typesHtml += '</ul>';
            document.getElementById('type-distribution').innerHTML = typesHtml;
            
            // Fetch and update raw resource metrics
            const rawResponse = await fetch('/api/metrics/formatted.json');
            const rawText = await rawResponse.text();
            document.getElementById('raw-metrics').textContent = rawText;
            
            // Fetch and update raw event metrics
            try {
              const rawEventsResponse = await fetch('/api/metrics/events_formatted.json');
              const rawEventsText = await rawEventsResponse.text();
              document.getElementById('raw-events').textContent = rawEventsText;
            } catch (error) {
              console.log('No raw event metrics data available yet');
              document.getElementById('raw-events').textContent = 'No event metrics data available yet';
            }
            
          } catch (error) {
            console.error('Error fetching metrics data:', error);
            document.getElementById('raw-metrics').textContent = 'Error loading metrics data. Please try again later.';
          }
        }
        
        // Initial data load
        document.addEventListener('DOMContentLoaded', () => {
          refreshData();
          // Auto-refresh every 30 seconds
          setInterval(refreshData, 30000);
        });
      </script>
    </body>
    </html>
---
apiVersion: v1
kind: Service
metadata:
  name: mock-hakongo-api
spec:
  selector:
    app: mock-hakongo-api
  ports:
  - name: api
    port: 80
    targetPort: http
  - name: dashboard
    port: 8080
    targetPort: metrics-ui
  type: ClusterIP
